#ifndef INCOMPRESSIBLEFLOWCLASS_CU
#define INCOMPRESSIBLEFLOWCLASS_CU

#define ERROR_CHECK(ans) { gpuAssert((ans), __FILE__, __LINE__); }
inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort=true)
{
   if (code != cudaSuccess)
   {
      fprintf(stderr,"GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
      if (abort) exit(code);
   }
}

#include <iostream> 
#include <vector>
#include <string>
#include <map>
#include <cufft.h>
#include <cufftXt.h>
#include "incompressibleflowclass.h"
#include "incompressibleflowclassGPU.cu"


using namespace std; 

// ===================================================================
// Constructors
IncompressibleFlow::IncompressibleFlow (Mesh* mesh_ptr_t, string name_t) {
    mesh_ptr=mesh_ptr_t;
    name=name_t;
    priority=0;
    boun_cond = "periodic";
    init_cond = "sin";
    location = "both";
    expo_data = "on";
    initFields ();
};


// -------------------------------------------------------------------
IncompressibleFlow::IncompressibleFlow (Mesh* mesh_ptr_t, string name_t, int priority_t) {
    mesh_ptr=mesh_ptr_t;
    name=name_t;
    priority=priority_t;
    boun_cond = "periodic";
    init_cond = "sin";
    expo_data = "on";
    initFields ();    
};


// -------------------------------------------------------------------
IncompressibleFlow::IncompressibleFlow (Mesh* mesh_ptr_t, string name_t, int priority_t, string boun_cond_t, string init_cond_t, string expo_data_t) {
    mesh_ptr=mesh_ptr_t;
    name=name_t;
    priority=priority_t;
    boun_cond = boun_cond_t;
    init_cond = init_cond_t;
    expo_data = expo_data_t;
    initFields ();
};


// -------------------------------------------------------------------
void IncompressibleFlow::initFields () {
    setFieldProperties(&vx, name+".vx",-1);
    setFieldProperties(&vy, name+".vy",-1);
    setFieldProperties(&omega, name+".omega",priority);
    setFieldProperties(&phi, name+".phi",-1);
    // This can trigger calculating stream function and velocity after
    //   a new omega has been obtained
    omega.specialty="IncompressibleFlow.omega";
    // No RHS for vx, vy, phi, as they need special functions to get values
    vx.setRhsTerms({});
    vy.setRhsTerms({});
    phi.setRhsTerms({});
    
    vx.allocField<double>(vx.f_host[0], "cpu");
    vy.allocField<double>(vy.f_host[0], "cpu");
    omega.allocField<double>(omega.f_host[0], "cpu");
    phi.allocField<double>(phi.f_host[0], "cpu");
    setFieldValues(init_cond);
    
    initPoissonSolver();
};


// -------------------------------------------------------------------
void IncompressibleFlow::setFieldProperties (Field* field_ptr, string field_name, int priority_t) {
    (*field_ptr).traits_host.mesh_ptr=mesh_ptr;
    (*field_ptr).traits_host.name=field_name;
    (*field_ptr).traits_host.priority=priority_t;
    (*field_ptr).traits_host.boun_cond = boun_cond;
    (*field_ptr).traits_host.init_cond = init_cond;
    (*field_ptr).traits_host.expo_data = expo_data;
    (*field_ptr).num_f_funcs=0;
    for (int i=0; i<200; i++) {
        (*field_ptr).f_funcs_host[i]=NULL;
    };
};


// -------------------------------------------------------------------
void IncompressibleFlow::setFieldValues (string init_cond_t) {    
    if (vx.traits_host.init_cond=="Gaussian") {
        vx.initFieldGaus(0,10,1);
        vy.initFieldGaus(0,10,1);
    } else if (vx.traits_host.init_cond=="ones") {
        vx.initFieldConst(1);
        vy.initFieldConst(1);
    } else if (vx.traits_host.init_cond=="sin") {
        vx.initFieldSin(0.01,4,0);
        vy.initFieldSin(0.01,4,0);
    };

    setOmegaValues();
};


// --------------------------------------------------------------------
void IncompressibleFlow::setOmegaValues () {
    int Nx=vx.gridNumber().x;
    int Ny=vx.gridNumber().y;
    int Nbx=vx.gridNumberBoun().x;
    int Nby=vx.gridNumberBoun().y;
    double dx=vx.gridSize().x;
    double dy=vx.gridSize().y;
    FFuncArgs f_func_args(Nx, Ny, Nbx, Nby, dx, dy);
    f_func_args.dj=1;
    f_func_args.di=Nx+2*Nbx;
    FFuncType d1x=f_func_map_all[{"d1x","CentralDifferenceO4Iso2D"}];
    FFuncType d1y=f_func_map_all[{"d1y","CentralDifferenceO4Iso2D"}];
    
    for (int i=0; i<Ny; i++) {
        for (int j=0; j<Nx; j++) {
            int idx=(i+Nby)*(Nx+2*Nbx)+j+Nbx;
            omega.f_host[0][idx]=d1x(vy.f_host[0],idx,f_func_args)-d1y(vx.f_host[0],idx,f_func_args);
        };
    };
    omega.applyBounCondPeriCPU(omega.f_host[0]);
};


// -------------------------------------------------------------------
void IncompressibleFlow::getVelocity (int i_field) {
    int Nx=vx.gridNumber().x;
    int Ny=vx.gridNumber().y;
    int Nbx=vx.gridNumberBoun().x;
    int Nby=vx.gridNumberBoun().y;    
    FFuncArgs f_func_args(Nx,Ny,Nbx,Nby,vx.gridSize().x,vx.gridSize().y);

    cout <<"Getting stream for field "<<i_field<<"..."<<endl;
    getStreamGPU<<<Ny,Nx>>>(phi_complex, phi.f[i_field], omega.f[i_field], poisson_k2_dev, Nx, Ny, Nbx, Nby, 0);
    omega.export_conf("0","gpu");
    export_conf_any_c(phi_complex, name+".phi_c0", "0", "gpu", 0, 1);
    cufftExecZ2Z(cufftPlan,phi_complex,phi_complex,CUFFT_FORWARD);
    getStreamGPU<<<Ny,Nx>>> (phi_complex, phi.f[i_field], omega.f[i_field], poisson_k2_dev, Nx, Ny, Nbx, Nby, 1);
    cufftExecZ2Z(cufftPlan,phi_complex,phi_complex,CUFFT_INVERSE);
    getStreamGPU<<<Ny,Nx>>> (phi_complex, phi.f[i_field], omega.f[i_field], poisson_k2_dev, Nx, Ny, Nbx, Nby, 2);
    phi.applyBounCondPeriGPU(phi.f[i_field]);
    getVCoreGPU<<<Ny,Nx>>>(phi.f[i_field], vx.f[i_field], vy.f[i_field], f_func_map_all_dev[{"d1x",vx.FDMScheme}], f_func_map_all_dev[{"d1y",vx.FDMScheme}], f_func_args);

    
};

// -----------------------------------------------------------
void IncompressibleFlow::export_conf_any(double* f_t, string f_name, string str_t, string location_t="cpu" , int has_boun=0) {
    ofstream conf_file;
    int PrecData=8;
    string conf_file_name="data/"+f_name+"_"+ str_t + ".dat";
    conf_file.open(conf_file_name.c_str() );
    
    int idx;
    int Nx=vx.gridNumber().x;
    int Ny=vx.gridNumber().y;
    int Nbx=vx.gridNumberBoun().x;
    int Nby=vx.gridNumberBoun().y;
    int* idx0=new int [4];
    int include_boun=0;
    double* f_temp_host;
    
    if (include_boun==0) {
        idx0[0]=0;
        idx0[1]=0;
        idx0[2]=0;
        idx0[3]=0;
    } else {
        idx0[0]=-Nbx;
        idx0[1]=Nbx;
        idx0[2]=-Nby;
        idx0[3]=Nby;
    };

    if (has_boun==0) {
        Nbx=0;
        Nby=0;
    };
    if (location_t=="gpu") {
        vx.allocField<double>(f_temp_host, "cpu");
        cudaMemcpy(f_temp_host, f_t, (Nx+2*Nbx)*(Ny+2*Nby)*sizeof(double),cudaMemcpyDeviceToHost);
    };      

    for (int j=idx0[2]; j<Ny+idx0[3]; j++) {
        for (int i=idx0[0]; i<Nx+idx0[1]; i++) {
            
            idx=(Nx+2*Nbx)*(j+Nby)+i+Nbx;
            if (location_t=="cpu") {
                conf_file<<setiosflags(ios::scientific) <<setprecision(PrecData) <<f_t[idx]<<endl;
            } else {
                conf_file<<setiosflags(ios::scientific) <<setprecision(PrecData) <<f_temp_host[idx]<<endl;
            };
        }
    }
    conf_file.close();
}

// -----------------------------------------------------------
void IncompressibleFlow::export_conf_any_c(cufftDoubleComplex* f_t, string f_name, string str_t, string location_t="cpu" , int has_boun=0, int direction=1) {
    ofstream conf_file;
    int PrecData=8;
    string conf_file_name="data/"+f_name+"_"+ str_t + ".dat";
    conf_file.open(conf_file_name.c_str() );
    
    int idx;
    int Nx=vx.gridNumber().x;
    int Ny=vx.gridNumber().y;
    int Nbx=vx.gridNumberBoun().x;
    int Nby=vx.gridNumberBoun().y;
    int* idx0=new int [4];
    int include_boun=0;
    cufftDoubleComplex * f_temp_host;
    
    if (include_boun==0) {
        idx0[0]=0;
        idx0[1]=0;
        idx0[2]=0;
        idx0[3]=0;
    } else {
        idx0[0]=-Nbx;
        idx0[1]=Nbx;
        idx0[2]=-Nby;
        idx0[3]=Nby;
    };

    if (has_boun==0) {
        Nbx=0;
        Nby=0;
    };
    
    if (location_t=="gpu") {
        cufftDoubleComplex* f_temp_host=new cufftDoubleComplex[(Nx+2*Nbx)*(Ny+2*Nby)];
        // ERROR_CHECK(cudaMemcpy(f_temp_host, f_t, (Nx+2*Nbx)*(Ny+2*Nby)*sizeof(cufftDoubleComplex), cudaMemcpyDeviceToHost));
        cudaMemcpy(f_temp_host, f_t, (Nx+2*Nbx)*(Ny+2*Nby)*sizeof(cufftDoubleComplex), cudaMemcpyDeviceToHost);
    };    

    for (int j=idx0[2]; j<Ny+idx0[3]; j++) {
        for (int i=idx0[0]; i<Nx+idx0[1]; i++) {
            
            idx=(Nx+2*Nbx)*(j+Nby)+i+Nbx;
            if (location_t=="cpu") {                
                conf_file<<setiosflags(ios::scientific) <<setprecision(PrecData) <<f_t[idx].x<<endl;
            } else {
                if (direction ==1) {
                    conf_file<<setiosflags(ios::scientific) <<setprecision(PrecData) <<f_temp_host[idx].x<<endl;
                } else {
                    conf_file<<setiosflags(ios::scientific) <<setprecision(PrecData) <<f_temp_host[idx].y<<endl;
                };
            };
        }
    }
    conf_file.close();
}

//=======================================================================
void IncompressibleFlow::initPoissonSolver() {
  // Creating wavenumber array
    double kx,ky;
    int Nx=vx.gridNumber().x;
    int Ny=vx.gridNumber().y;
    double dx=vx.gridSize().x;
    double dy=vx.gridSize().y;
    poisson_k2_host=new real[Nx*Ny];
    cudaMalloc((void **)&poisson_k2_dev, (Nx*Ny)*sizeof(double));
    cudaMalloc((void **)&phi_complex, (Nx*Ny)*sizeof(cufftDoubleComplex));
    
    for (int i=0; i<Ny; i++){
        ky = 2*Pi*i/(Ny*dy+0.0);
        if (i>=Ny/2) {
            ky=2*Pi*(i-Ny)/(Ny*dy+0.0);
        }
        for (int j=0; j<Nx; j++){
            kx=2*Pi*j/(Nx*dx+0.0);
            if (j>=Nx/2) {
                kx=2*Pi*(j-Nx)/(Nx*dx+0.0);
            }
            int idx=i*Nx+j;
            poisson_k2_host[idx]=kx*kx+ky*ky;
        }
    }
    poisson_k2_host[0]=1;

    cudaMemcpy(poisson_k2_dev,poisson_k2_host,sizeof(double)*Nx*Ny,cudaMemcpyHostToDevice);  
    cufftPlan2d(&cufftPlan, Ny, Nx, CUFFT_Z2Z);
}


// =====================================================================

#endif
